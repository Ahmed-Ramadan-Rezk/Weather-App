{"ast":null,"code":"import _slicedToArray from\"D:/Programming/Projects/Weather App/weather_app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import axios from'axios';import'./App.css';import LeftSide from'./components/LeftSide';import RightSide from'./components/RightSide';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var API_KEY='cae54b8bd4ab32e6e35a832728873700';var API_URL=\"http://api.openweathermap.org/data/2.5/onecall?\";function App(){// Toggle Classes\nvar _useState=useState(false),_useState2=_slicedToArray(_useState,2),isToggle=_useState2[0],setIsToggle=_useState2[1];var toggle=function toggle(e){setIsToggle(!isToggle);};/* All Needed States */var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),lat=_useState4[0],setLat=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),lon=_useState6[0],setLon=_useState6[1];var _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),currentTemp=_useState8[0],setCurrentTemp=_useState8[1];var _useState9=useState([]),_useState10=_slicedToArray(_useState9,2),desc=_useState10[0],setDesc=_useState10[1];var _useState11=useState([]),_useState12=_slicedToArray(_useState11,2),currentIcon=_useState12[0],setCurrentIcon=_useState12[1];var _useState13=useState([]),_useState14=_slicedToArray(_useState13,2),timeZone=_useState14[0],setTimeZone=_useState14[1];var _useState15=useState([]),_useState16=_slicedToArray(_useState15,2),uvi=_useState16[0],setUvi=_useState16[1];var _useState17=useState([]),_useState18=_slicedToArray(_useState17,2),windSpeed=_useState18[0],setWindSpeed=_useState18[1];var _useState19=useState([]),_useState20=_slicedToArray(_useState19,2),sunrise=_useState20[0],setSunrise=_useState20[1];var _useState21=useState([]),_useState22=_slicedToArray(_useState21,2),sunset=_useState22[0],setSunset=_useState22[1];var _useState23=useState([]),_useState24=_slicedToArray(_useState23,2),humidity=_useState24[0],setHumidity=_useState24[1];var _useState25=useState([]),_useState26=_slicedToArray(_useState25,2),visibility=_useState26[0],setVisibility=_useState26[1];var _useState27=useState([]),_useState28=_slicedToArray(_useState27,2),windDeg=_useState28[0],setWindDeg=_useState28[1];var _useState29=useState([]),_useState30=_slicedToArray(_useState29,2),rain=_useState30[0],setRain=_useState30[1];var _useState31=useState([]),_useState32=_slicedToArray(_useState31,2),dayForecast=_useState32[0],setDayForecast=_useState32[1];/* All Needed States */useEffect(function(){// Get current position with Latitude & Longitude\nnavigator.geolocation.getCurrentPosition(function(position){setLat(position.coords.latitude);setLon(position.coords.longitude);});// Request & get data from the API\naxios.get(\"\".concat(API_URL,\"lat=\").concat(lat,\"&lon=\").concat(lon,\"&exclude=hourly,minutley&units=metric&appid=\").concat(API_KEY)).then(function(res){var getData=res.data;/* All Needed API Data */setDayForecast(getData.daily);setUvi(getData.daily[0].uvi);setWindSpeed(getData.daily[0].wind_speed);setSunrise(new Date(getData.daily[0].sunrise*1000).toLocaleTimeString());setSunset(new Date(getData.daily[0].sunset*1000).toLocaleTimeString());setHumidity(getData.daily[0].humidity);setVisibility(getData.current.visibility);setWindDeg(getData.current.wind_deg);setCurrentTemp(getData.daily[0].temp.day);setDesc(getData.daily[0].weather[0].description);setCurrentIcon(getData.daily[0].weather[0].icon);setTimeZone(getData.timezone);setRain(getData.daily[0].rain);/* All Needed API Data */});},[lat,lon]);return/*#__PURE__*/_jsxs(\"section\",{className:\"app\",children:[/*#__PURE__*/_jsx(LeftSide,{currentTemp:currentTemp,desc:desc,currentIcon:currentIcon,toggle:toggle,isToggle:isToggle,timeZone:timeZone,rain:rain}),/*#__PURE__*/_jsx(RightSide,{dayForecast:dayForecast,uvi:uvi,windSpeed:windSpeed,sunrise:sunrise,sunset:sunset,humidity:humidity,visibility:visibility,windDeg:windDeg,toggle:toggle,isToggle:isToggle})]});}export default App;","map":{"version":3,"sources":["D:/Programming/Projects/Weather App/weather_app/src/App.js"],"names":["React","useState","useEffect","axios","LeftSide","RightSide","API_KEY","API_URL","App","isToggle","setIsToggle","toggle","e","lat","setLat","lon","setLon","currentTemp","setCurrentTemp","desc","setDesc","currentIcon","setCurrentIcon","timeZone","setTimeZone","uvi","setUvi","windSpeed","setWindSpeed","sunrise","setSunrise","sunset","setSunset","humidity","setHumidity","visibility","setVisibility","windDeg","setWindDeg","rain","setRain","dayForecast","setDayForecast","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","get","then","res","getData","data","daily","wind_speed","Date","toLocaleTimeString","current","wind_deg","temp","day","weather","description","icon","timezone"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport LeftSide from './components/LeftSide';\nimport RightSide from './components/RightSide';\n\nconst API_KEY = 'cae54b8bd4ab32e6e35a832728873700';\nconst API_URL = `http://api.openweathermap.org/data/2.5/onecall?`;\n\nfunction App() {\n\n  // Toggle Classes\n  const [isToggle, setIsToggle] = useState(false)\n  const toggle = (e) => {\n    setIsToggle(!isToggle);\n  }\n\n  /* All Needed States */\n  const [lat, setLat] = useState([]);\n  const [lon, setLon] = useState([]);\n  const [currentTemp, setCurrentTemp] = useState([]);\n  const [desc, setDesc] = useState([]);\n  const [currentIcon, setCurrentIcon] = useState([]);\n  const [timeZone, setTimeZone] = useState([]);\n  const [uvi, setUvi] = useState([]);\n  const [windSpeed, setWindSpeed] = useState([]);\n  const [sunrise, setSunrise] = useState([]);\n  const [sunset, setSunset] = useState([]);\n  const [humidity, setHumidity] = useState([]);\n  const [visibility, setVisibility] = useState([]);\n  const [windDeg, setWindDeg] = useState([]);\n  const [rain, setRain] = useState([]);\n  const [dayForecast, setDayForecast] = useState([]);\n  /* All Needed States */\n\n  useEffect(() => {\n    // Get current position with Latitude & Longitude\n    navigator.geolocation.getCurrentPosition((position) => {\n      setLat(position.coords.latitude);\n      setLon(position.coords.longitude);\n    })\n    \n    // Request & get data from the API\n    axios.get(`${API_URL}lat=${lat}&lon=${lon}&exclude=hourly,minutley&units=metric&appid=${API_KEY}`)\n    .then((res) => {\n      const getData = res.data;\n      \n      /* All Needed API Data */\n      setDayForecast(getData.daily)\n      setUvi(getData.daily[0].uvi);\n      setWindSpeed(getData.daily[0].wind_speed);\n      setSunrise(new Date(getData.daily[0].sunrise * 1000).toLocaleTimeString());\n      setSunset(new Date(getData.daily[0].sunset * 1000).toLocaleTimeString());\n      setHumidity(getData.daily[0].humidity);\n      setVisibility(getData.current.visibility);\n      setWindDeg(getData.current.wind_deg);\n      setCurrentTemp(getData.daily[0].temp.day);\n      setDesc(getData.daily[0].weather[0].description);\n      setCurrentIcon(getData.daily[0].weather[0].icon);\n      setTimeZone(getData.timezone);\n      setRain(getData.daily[0].rain);\n      /* All Needed API Data */\n    });\n  }, [lat, lon])\n\n  return (\n    <section className=\"app\">\n      <LeftSide \n        currentTemp={currentTemp}\n        desc={desc}\n        currentIcon={currentIcon}\n        toggle={toggle}\n        isToggle={isToggle}\n        timeZone={timeZone}\n        rain={rain}\n      />\n      \n      <RightSide \n        dayForecast={dayForecast}\n        uvi={uvi}\n        windSpeed={windSpeed}\n        sunrise={sunrise}\n        sunset={sunset}\n        humidity={humidity}\n        visibility={visibility}\n        windDeg={windDeg}\n        toggle={toggle}\n        isToggle={isToggle}\n      />\n    </section>\n  )\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}