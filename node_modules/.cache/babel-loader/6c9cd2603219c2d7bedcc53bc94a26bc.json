{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programming\\\\Projects\\\\Weather App\\\\weather_app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport LeftSide from './components/LeftSide';\nimport RightSide from './components/RightSide';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = 'cae54b8bd4ab32e6e35a832728873700';\nconst API_URL = `http://api.openweathermap.org/data/2.5/onecall?`;\n\nfunction App() {\n  _s();\n\n  const [isToggle, setIsToggle] = useState(false);\n\n  const toggle = e => {\n    setIsToggle(!isToggle);\n  };\n\n  const [forecast, setForecast] = useState([]);\n  /* All Needed States */\n\n  const [lat, setLat] = useState([]);\n  const [lon, setLon] = useState([]);\n  const [currentTemp, setCurrentTemp] = useState([]);\n  const [desc, setDesc] = useState([]);\n  const [currentIcon, setCurrentIcon] = useState([]);\n  const [timeZone, setTimeZone] = useState([]);\n  const [uvi, setUvi] = useState([]);\n  const [windSpeed, setWindSpeed] = useState([]);\n  const [sunrise, setSunrise] = useState([]);\n  const [sunset, setSunset] = useState([]);\n  const [humidity, setHumidity] = useState([]);\n  const [visibility, setVisibility] = useState([]);\n  const [windDeg, setWindDeg] = useState([]);\n  const [rain, setRain] = useState([]);\n  /* All Needed States */\n\n  useEffect(() => {\n    // Get current position with Latitude & Longitude\n    navigator.geolocation.getCurrentPosition(position => {\n      setLat(position.coords.latitude);\n      setLon(position.coords.longitude);\n    }); // Request & get data from the API URL\n\n    axios.get(`${API_URL}lat=${lat}&lon=${lon}&exclude=hourly,minutley&units=metric&appid=${API_KEY}`).then(res => {\n      const getData = res.data;\n      setForecast(getData.daily);\n      /* All Needed API Data */\n\n      setUvi(getData.daily[0].uvi);\n      setWindSpeed(getData.daily[0].wind_speed);\n      setSunrise(new Date(getData.daily[0].sunrise * 1000).toLocaleTimeString());\n      setSunset(new Date(getData.daily[0].sunset * 1000).toLocaleTimeString());\n      setHumidity(getData.daily[0].humidity);\n      setVisibility(getData.current.visibility);\n      setWindDeg(getData.current.wind_deg);\n      setCurrentTemp(getData.daily[0].temp.day);\n      setDesc(getData.daily[0].weather[0].description);\n      setCurrentIcon(getData.daily[0].weather[0].icon);\n      setTimeZone(getData.timezone);\n      setRain(getData.daily[0].rain);\n      /* All Needed API Data */\n    });\n  }, [lat, lon]);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(LeftSide, {\n      currentTemp: currentTemp,\n      desc: desc,\n      currentIcon: currentIcon,\n      toggle: toggle,\n      isToggle: isToggle,\n      timeZone: timeZone,\n      rain: rain\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RightSide, {\n      forecast: forecast,\n      uvi: uvi,\n      windSpeed: windSpeed,\n      sunrise: sunrise,\n      sunset: sunset,\n      humidity: humidity,\n      visibility: visibility,\n      windDeg: windDeg,\n      toggle: toggle,\n      isToggle: isToggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"AWAlAI0Wghr2afxpnrCF58fTxaI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/Programming/Projects/Weather App/weather_app/src/App.js"],"names":["React","useState","useEffect","axios","LeftSide","RightSide","API_KEY","API_URL","App","isToggle","setIsToggle","toggle","e","forecast","setForecast","lat","setLat","lon","setLon","currentTemp","setCurrentTemp","desc","setDesc","currentIcon","setCurrentIcon","timeZone","setTimeZone","uvi","setUvi","windSpeed","setWindSpeed","sunrise","setSunrise","sunset","setSunset","humidity","setHumidity","visibility","setVisibility","windDeg","setWindDeg","rain","setRain","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","get","then","res","getData","data","daily","wind_speed","Date","toLocaleTimeString","current","wind_deg","temp","day","weather","description","icon","timezone"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport LeftSide from './components/LeftSide';\nimport RightSide from './components/RightSide';\n\nconst API_KEY = 'cae54b8bd4ab32e6e35a832728873700';\nconst API_URL = `http://api.openweathermap.org/data/2.5/onecall?`;\n\nfunction App() {\n\n  const [isToggle, setIsToggle] = useState(false)\n  const toggle = (e) => {\n    setIsToggle(!isToggle);\n  }\n\n  const [forecast, setForecast] = useState([])\n\n  /* All Needed States */\n  const [lat, setLat] = useState([]);\n  const [lon, setLon] = useState([]);\n\n  const [currentTemp, setCurrentTemp] = useState([]);\n  const [desc, setDesc] = useState([]);\n  const [currentIcon, setCurrentIcon] = useState([]);\n  const [timeZone, setTimeZone] = useState([]);\n  const [uvi, setUvi] = useState([]);\n  const [windSpeed, setWindSpeed] = useState([]);\n  const [sunrise, setSunrise] = useState([]);\n  const [sunset, setSunset] = useState([]);\n  const [humidity, setHumidity] = useState([]);\n  const [visibility, setVisibility] = useState([]);\n  const [windDeg, setWindDeg] = useState([]);\n  const [rain, setRain] = useState([]);\n  /* All Needed States */\n\n  useEffect(() => {\n    // Get current position with Latitude & Longitude\n    navigator.geolocation.getCurrentPosition((position) => {\n      setLat(position.coords.latitude);\n      setLon(position.coords.longitude);\n    })\n    \n    // Request & get data from the API URL\n    axios.get(`${API_URL}lat=${lat}&lon=${lon}&exclude=hourly,minutley&units=metric&appid=${API_KEY}`)\n    .then((res) => {\n      const getData = res.data;\n      setForecast(getData.daily)\n\n      /* All Needed API Data */\n      setUvi(getData.daily[0].uvi);\n      setWindSpeed(getData.daily[0].wind_speed);\n      setSunrise(new Date(getData.daily[0].sunrise * 1000).toLocaleTimeString());\n      setSunset(new Date(getData.daily[0].sunset * 1000).toLocaleTimeString());\n      setHumidity(getData.daily[0].humidity);\n      setVisibility(getData.current.visibility);\n      setWindDeg(getData.current.wind_deg);\n      setCurrentTemp(getData.daily[0].temp.day);\n      setDesc(getData.daily[0].weather[0].description);\n      setCurrentIcon(getData.daily[0].weather[0].icon);\n      setTimeZone(getData.timezone);\n      setRain(getData.daily[0].rain);\n      /* All Needed API Data */\n    });\n  }, [lat, lon])\n\n  return (\n    <section className=\"app\">\n      <LeftSide \n        currentTemp={currentTemp}\n        desc={desc}\n        currentIcon={currentIcon}\n        toggle={toggle}\n        isToggle={isToggle}\n        timeZone={timeZone}\n        rain={rain}\n      />\n      \n      <RightSide \n        forecast={forecast}\n        uvi={uvi}\n        windSpeed={windSpeed}\n        sunrise={sunrise}\n        sunset={sunset}\n        humidity={humidity}\n        visibility={visibility}\n        windDeg={windDeg}\n        toggle={toggle}\n        isToggle={isToggle}\n      />\n    </section>\n  )\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}