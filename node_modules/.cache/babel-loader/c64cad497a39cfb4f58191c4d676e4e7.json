{"ast":null,"code":"var _jsxFileName = \"D:\\\\Programming\\\\Projects\\\\Weather App\\\\weather_app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport LeftSide from './components/LeftSide';\nimport RightSide from './components/RightSide';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiKey = 'cae54b8bd4ab32e6e35a832728873700';\nconst apiUrl = `http://api.openweathermap.org/data/2.5/onecall?`;\n\nfunction App() {\n  _s();\n\n  // Toggle Classes\n  const [isToggle, setIsToggle] = useState(false);\n\n  const toggle = e => {\n    setIsToggle(!isToggle);\n  };\n  /* All Needed States */\n\n\n  const [lat, setLat] = useState([]);\n  const [lon, setLon] = useState([]);\n  const [currentTemp, setCurrentTemp] = useState([]);\n  const [desc, setDesc] = useState([]);\n  const [currentIcon, setCurrentIcon] = useState([]);\n  const [timeZone, setTimeZone] = useState([]);\n  const [uvi, setUvi] = useState([]);\n  const [windSpeed, setWindSpeed] = useState([]);\n  const [sunrise, setSunrise] = useState([]);\n  const [sunset, setSunset] = useState([]);\n  const [humidity, setHumidity] = useState([]);\n  const [visibility, setVisibility] = useState([]);\n  const [windDeg, setWindDeg] = useState([]);\n  const [rain, setRain] = useState([]);\n  const [dayForecast, setDayForecast] = useState([]);\n  /* All Needed States */\n\n  useEffect(() => {\n    // Get current position with Latitude & Longitude\n    navigator.geolocation.getCurrentPosition(position => {\n      setLat(position.coords.latitude);\n      setLon(position.coords.longitude);\n    }); // Request & get data from the API\n\n    axios.get(`${apiUrl}lat=${lat}&lon=${lon}&exclude=hourly,minutley&units=metric&appid=${apiKey}`).then(res => {\n      const getData = res.data;\n      /* All Needed API Data */\n\n      setDayForecast(getData.daily);\n      setUvi(getData.current.uvi);\n      setWindSpeed(getData.current.wind_speed);\n      setSunrise(new Date(getData.current.sunrise * 1000).toLocaleTimeString());\n      setSunset(new Date(getData.current.sunset * 1000).toLocaleTimeString());\n      setHumidity(getData.current.humidity);\n      setVisibility(getData.current.visibility);\n      setWindDeg(getData.current.wind_deg);\n      setCurrentTemp(getData.current.temp);\n      setDesc(getData.current.weather[0].description);\n      setCurrentIcon(getData.current.weather[0].icon);\n      setTimeZone(getData.timezone);\n      setRain(getData.daily[0].rain);\n      /* All Needed API Data */\n    });\n  }, [lat, lon]);\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(LeftSide, {\n      currentTemp: currentTemp,\n      desc: desc,\n      currentIcon: currentIcon,\n      toggle: toggle,\n      isToggle: isToggle,\n      timeZone: timeZone,\n      rain: rain\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RightSide, {\n      dayForecast: dayForecast,\n      uvi: uvi,\n      windSpeed: windSpeed,\n      sunrise: sunrise,\n      sunset: sunset,\n      humidity: humidity,\n      visibility: visibility,\n      windDeg: windDeg,\n      toggle: toggle,\n      isToggle: isToggle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"bABCDVWFHAJTskK0YdpZhWucW+A=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/Programming/Projects/Weather App/weather_app/src/App.js"],"names":["React","useState","useEffect","axios","LeftSide","RightSide","apiKey","apiUrl","App","isToggle","setIsToggle","toggle","e","lat","setLat","lon","setLon","currentTemp","setCurrentTemp","desc","setDesc","currentIcon","setCurrentIcon","timeZone","setTimeZone","uvi","setUvi","windSpeed","setWindSpeed","sunrise","setSunrise","sunset","setSunset","humidity","setHumidity","visibility","setVisibility","windDeg","setWindDeg","rain","setRain","dayForecast","setDayForecast","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","get","then","res","getData","data","daily","current","wind_speed","Date","toLocaleTimeString","wind_deg","temp","weather","description","icon","timezone"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport LeftSide from './components/LeftSide';\nimport RightSide from './components/RightSide';\n\nconst apiKey = 'cae54b8bd4ab32e6e35a832728873700';\nconst apiUrl = `http://api.openweathermap.org/data/2.5/onecall?`;\n\nfunction App() {\n\n  // Toggle Classes\n  const [isToggle, setIsToggle] = useState(false)\n  const toggle = (e) => {\n    setIsToggle(!isToggle);\n  }\n\n  /* All Needed States */\n  const [lat, setLat] = useState([]);\n  const [lon, setLon] = useState([]);\n  const [currentTemp, setCurrentTemp] = useState([]);\n  const [desc, setDesc] = useState([]);\n  const [currentIcon, setCurrentIcon] = useState([]);\n  const [timeZone, setTimeZone] = useState([]);\n  const [uvi, setUvi] = useState([]);\n  const [windSpeed, setWindSpeed] = useState([]);\n  const [sunrise, setSunrise] = useState([]);\n  const [sunset, setSunset] = useState([]);\n  const [humidity, setHumidity] = useState([]);\n  const [visibility, setVisibility] = useState([]);\n  const [windDeg, setWindDeg] = useState([]);\n  const [rain, setRain] = useState([]);\n  const [dayForecast, setDayForecast] = useState([]);\n  /* All Needed States */\n\n  useEffect(() => {\n    // Get current position with Latitude & Longitude\n    navigator.geolocation.getCurrentPosition((position) => {\n      setLat(position.coords.latitude);\n      setLon(position.coords.longitude);\n    })\n    \n    // Request & get data from the API\n    axios.get(`${apiUrl}lat=${lat}&lon=${lon}&exclude=hourly,minutley&units=metric&appid=${apiKey}`)\n    .then((res) => {\n      const getData = res.data;\n            \n      /* All Needed API Data */\n      setDayForecast(getData.daily);\n      setUvi(getData.current.uvi);\n      setWindSpeed(getData.current.wind_speed);\n      setSunrise(new Date(getData.current.sunrise * 1000).toLocaleTimeString());\n      setSunset(new Date(getData.current.sunset * 1000).toLocaleTimeString());\n      setHumidity(getData.current.humidity);\n      setVisibility(getData.current.visibility);\n      setWindDeg(getData.current.wind_deg);\n      setCurrentTemp(getData.current.temp);\n      setDesc(getData.current.weather[0].description);\n      setCurrentIcon(getData.current.weather[0].icon);\n      setTimeZone(getData.timezone);\n      setRain(getData.daily[0].rain);\n      /* All Needed API Data */\n    });\n  }, [lat, lon])\n\n  return (\n    <section className=\"app\">\n      <LeftSide \n        currentTemp={currentTemp}\n        desc={desc}\n        currentIcon={currentIcon}\n        toggle={toggle}\n        isToggle={isToggle}\n        timeZone={timeZone}\n        rain={rain}\n      />\n      \n      <RightSide \n        dayForecast={dayForecast}\n        uvi={uvi}\n        windSpeed={windSpeed}\n        sunrise={sunrise}\n        sunset={sunset}\n        humidity={humidity}\n        visibility={visibility}\n        windDeg={windDeg}\n        toggle={toggle}\n        isToggle={isToggle}\n      />\n    </section>\n  )\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}